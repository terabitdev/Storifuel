import 'dart:io';
import 'dart:typed_data';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:storifuel/models/story_model.dart';

class PDFService {
  /// Generates a PDF from a story and saves it to device storage
  /// Returns the file path if successful, null if failed
  static Future<String?> generateStoryPDF(StoryModel story) async {
    try {
      // Create PDF document
      final pdf = pw.Document();

      // Add page to PDF
      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(40),
          build: (pw.Context context) {
            return [
              // Title
              pw.Header(
                level: 0,
                child: pw.Text(
                  story.title,
                  style: pw.TextStyle(
                    fontSize: 24,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),
              pw.SizedBox(height: 20),

              // Metadata
              pw.Row(
                children: [
                  pw.Text(
                    'Categories: ${story.categories.join(', ')}',
                    style: pw.TextStyle(
                      fontSize: 12,
                      color: PdfColors.grey700,
                    ),
                  ),
                  pw.Spacer(),
                  pw.Text(
                    'Created: ${story.getTimeAgo()}',
                    style: pw.TextStyle(
                      fontSize: 12,
                      color: PdfColors.grey700,
                    ),
                  ),
                ],
              ),
              pw.SizedBox(height: 10),
              pw.Divider(thickness: 1),
              pw.SizedBox(height: 20),
              pw.Paragraph(
                text: story.description,
                style: pw.TextStyle(
                  fontSize: 14,
                  lineSpacing: 1.5,
                ),
              ),
              pw.SizedBox(height: 40),
              pw.Align(
                alignment: pw.Alignment.center,
                child: pw.Text(
                  'Generated by StoriFuel',
                  style: pw.TextStyle(
                    fontSize: 10,
                    color: PdfColors.grey600,
                    fontStyle: pw.FontStyle.italic,
                  ),
                ),
              ),
            ];
          },
        ),
      );
      final Directory appDocDir = await getApplicationDocumentsDirectory();
      final String appDocPath = appDocDir.path;
      final sanitizedTitle = story.title
          .replaceAll(RegExp(r'[^\w\s-]'), '') // Remove special characters
          .replaceAll(RegExp(r'\s+'), '_') // Replace spaces with underscores
          .toLowerCase();
      
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = '${sanitizedTitle}_$timestamp.pdf';
      final filePath = '$appDocPath/$fileName';

      // Save the PDF file
      final File file = File(filePath);
      final Uint8List pdfBytes = await pdf.save();
      await file.writeAsBytes(pdfBytes,flush: true);

      return filePath;
    } catch (e) {
      return null;
    }
  }

  /// Gets a user-friendly display path for the saved PDF
  static String getDisplayPath(String filePath) {
    final fileName = filePath.split('/').last;
    return 'Documents/$fileName';
  }

  /// Checks if the file exists at the given path
  static Future<bool> fileExists(String filePath) async {
    try {
      final file = File(filePath);
      return await file.exists();
    } catch (e) {
      return false;
    }
  }

  /// Gets the size of the PDF file in a human-readable format
  static Future<String> getFileSize(String filePath) async {
    try {
      final file = File(filePath);
      final bytes = await file.length();
      
      if (bytes < 1024) {
        return '$bytes B';
      } else if (bytes < 1024 * 1024) {
        return '${(bytes / 1024).toStringAsFixed(1)} KB';
      } else {
        return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
      }
    } catch (e) {
      return 'Unknown';
    }
  }
}